# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...
alias gl='git log --topo-order --branches --remotes --tags --graph --pretty=format:"${_git_log_oneline_format}"'
alias gl='git log --branches --remotes --tags --graph --oneline --decorate'
alias gs='git status'
alias gd='git diff'
alias bi='bundle install'
alias be='bundle exec'
alias pi='pod install'
alias gaa='git add -A'
alias sourcetree='open -a SourceTree'
alias fbt='sudo killall coreaudiod'
alias gsync='git pull --rebase && git push'
alias gss='git add -A && git stash'
alias reload='. ~/.zshrc'
alias vscode='code'
alias kc='kubectl'
alias kx='kubectx'
alias kn='kubens'
alias rm-evicted="kubectl get pods --all-namespaces --field-selector 'status.phase==Failed' -o json | kubectl delete -f -"


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# Additional path
export PATH=$PATH:$HOME/bin

# FZF initialization
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f /usr/share/fzf/key-bindings.zsh ] && source /usr/share/fzf/key-bindings.zsh
[ -f /usr/share/fzf/completion.zsh ] && source /usr/share/fzf/completion.zsh

# psql
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

# Homebrew
eval "$(/opt/homebrew/bin/brew shellenv)"

# Golang
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# Python
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Init nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Android
# export PATH=$PATH:$HOME/Library/Android/sdk/tools

# CUDA lib
export LD_LIBRARY_PATH=/usr/local/cuda/lib64/

# NodeJS
export PATH=~/.npm-global/bin:$PATH

# Correct color profile
export TERM=xterm-256color

# Set default editor
export VISUAL=vim
export EDITOR=vim

# Setup conda
export PATH="/Users/jeep/miniconda3/bin:$PATH"

# Setup istio
export PATH=$PATH:$HOME/.istioctl/bin

# Setup linkerd
export PATH=$PATH:$HOME/.linkerd2/bin

# Setup poetry
export PATH=$PATH:$HOME/.poetry/bin

# Gitignore utility
function gi() { curl -L -s https://www.gitignore.io/api/$@ ;}

function cpsecret() {
    kubectl get secrets $1 -n $2 -o yaml  | grep -v namespace | kubectl apply -n $3 -f -
}


# Fix VTE issue
if [[ $TILIX_ID ]]; then
        source /etc/profile.d/vte.sh
fi

# Autocompletion for helm
#source <(helm completion zsh)

# Autocompletion for kubectl
source <(kubectl completion zsh)

#source <(eksctl completion zsh)

# Generated for envman. Do not edit.
[ -s "$HOME/.config/envman/load.sh" ] && source "$HOME/.config/envman/load.sh"


# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true


# asdf version manager
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
[ -f '/opt/homebrew/opt/asdf/libexec/asdf.sh' ] &&
. /opt/homebrew/opt/asdf/libexec/asdf.sh



# poetry setup
export PATH="$HOME/.poetry/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

# Fix git gpg signing
export GPG_TTY=$(tty)

if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

# terraform autocomplete
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform


# bdk-cli
export PATH="$HOME/.cargo/bin:$PATH"

# Flutter
export PATH=$HOME/development/flutter/bin:$PATH

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jeep/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/jeep/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jeep/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/jeep/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

# Use 1password ssh agent
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

alias awsume=". $(asdf which awsume)"

export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=YES
